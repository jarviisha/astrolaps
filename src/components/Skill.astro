---
import SkillCard from "./blocks/SkillCard.astro";
const imgLoops = [
  "/loop/1.jpeg",
  "/loop/2.jpeg",
  "/loop/3.jpeg",
  "/loop/4.jpeg",
  "/loop/5.jpeg",
  "/loop/6.jpeg",
  "/loop/7.jpeg",
  "/loop/8.jpeg",
];
---

<section id="skill" class="w-full pt-20 pb-32 relative overflow-hidden">
  <!-- 3D Depth Background Layers -->
  <div class="absolute inset-0 -z-20">
    {imgLoops.map((img, index) => {
      const sizes = [
        { width: '300px', top: '10%', left: '5%', translateZ: '-50px', scale: '1.00' },
        { width: '400px', top: '25%', left: '50%', translateZ: '-110px', scale: '1.06' },
        { width: '280px', top: '5%', left: '40%', translateZ: '-170px', scale: '1.12' },
        { width: '200px', top: '60%', left: '15%', translateZ: '-230px', scale: '1.18' },
        { width: '240px', top: '45%', left: '80%', translateZ: '-290px', scale: '1.24' },
        { width: '260px', top: '70%', left: '50%', translateZ: '-350px', scale: '1.30' },
        { width: '320px', top: '5%', left: '75%', translateZ: '-410px', scale: '1.36' },
        { width: '290px', top: '55%', left: '5%', translateZ: '-470px', scale: '1.42' }
      ];
      
      const currentSize = sizes[index];
      
      if (!currentSize) {
        return null;
      }
      
      return (
        <div 
          class={`absolute parallax-layer layer-${index + 1}`}
          data-speed={0.1 + (index * 0.1)}
          style={{
            width: currentSize.width,
            height: 'auto',
            top: currentSize.top,
            left: currentSize.left,
            transform: `translateZ(${currentSize.translateZ}) scale(${currentSize.scale})`,
            opacity: 0.8 - (index * 0.05),
            filter: `blur(${index * 0.5}px) brightness(${1.4 + (index * 0.06)}) contrast(1.4) saturate(1.2)`,
            mixBlendMode: 'normal'
          }}
        >
          <img 
            src={img}
            alt={`Background layer ${index + 1}`}
            class="w-full h-auto object-cover"
            style={{
              objectPosition: `${20 + (index * 10)}% ${30 + (index * 8)}%`,
              transform: `rotate(${(index - 3) * 2.5}deg)`
            }}
            loading="lazy"
            decoding="async"
          />
        </div>
      );
    })}
    <div class="absolute inset-0 bg-gradient-to-br from-black/15 via-transparent to-black/20"></div>
  </div>

  <div class="container justify-center mx-auto h-full text-white relative z-10">
    <!-- Header với GPU acceleration -->
    <div class="relative will-change-transform">
      <h1 class="text-9xl font-header transform-gpu">my-skills</h1>
    </div>
    
    <div class="grid grid-cols-12 gap-2 w-full">
      <!-- Backend Section với optimized images -->
      <div class="flex gap-8 relative justify-end col-start-5 col-end-13">
        <div class="p-4 will-change-transform">
          <h2 class="text-4xl mb-4 font-bold">BACKEND DEVELOPER</h2>
          <p class="mb-6">
            I specialize in backend development with a strong focus on
            performance, scalability, and clean architecture. My primary stack
            includes
          </p>
          
          <!-- Optimized grid layout -->
          <div class="flex gap-12">
            <div class="flex-1">
              <div>
                <h3 class="text-xl font-code font-bold">
                  #LANGUAGES AND FRAMEWORKS
                </h3>
                <SkillCard
                  icons={["/icons/golang.svg"]}
                  title="Golang"
                  content="High-performance APIs, concurrency, gRPC services"
                />
                <SkillCard
                  icons={["/icons/dotnet.svg", "/icons/csharp.svg"]}
                  title=".NET with C#"
                  content="RESTful APIs, business logic layers, Entity Framework"
                />
              </div>
            </div>
            
            <div class="flex-1">
              <div>
                <span class="text-xl font-bold font-code">#DATABASE</span>
                <SkillCard
                  icons={["/icons/sqlserver.svg", "/icons/pgsql.svg"]}
                  title="SQLServer & PostgreSQL"
                  content="Relational schema design, stored procedures, query optimization, indexing"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Frontend Section với optimized layout -->
      <div class="flex gap-8 relative col-span-12 mt-36">
        <div class="p-4 w-full will-change-transform">
          <h2 class="text-4xl mb-4 font-bold">FRONTEND DEVELOPER</h2>
          <p class="mb-6">
            I create modern, responsive, and accessible user interfaces with a focus on
            performance and user experience. My frontend expertise includes
          </p>
          
          <div class="flex gap-12">
            <div class="w-2/3">
              <div>
                <span class="text-xl font-code font-bold">
                  #LANGUAGES AND FRAMEWORKS
                </span>
                <SkillCard
                  icons={[
                    "/icons/html-5.svg",
                    "/icons/css-3.svg",
                    "/icons/javascript.svg",
                  ]}
                  title="HTML | CSS | JavaScript"
                  content="I'm comfortable working with HTML5, CSS3, and Vanilla JavaScript to create responsive, accessible, and user-friendly interfaces. I understand core frontend principles such as DOM manipulation, responsive layouts (Flexbox/Grid), and API integration."
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* 3D Depth Background Styles với kích thước đa dạng */
  .parallax-layer {
    transform-style: preserve-3d;
    perspective: 1200px;
    will-change: transform;
    backface-visibility: hidden;
  }
  
  .parallax-layer img {
    transform-style: preserve-3d;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    filter: contrast(1.1) saturate(1.2);
  }
  
  /* Layer-specific positioning cho depth và stacking */
  .layer-1 { 
    z-index: -26; 
    transform-origin: center bottom;
  }
  .layer-2 { 
    z-index: -25; 
    transform-origin: right top;
  }
  .layer-3 { 
    z-index: -24; 
    transform-origin: left center;
  }
  .layer-4 { 
    z-index: -23; 
    transform-origin: center top;
  }
  .layer-5 { 
    z-index: -22; 
    transform-origin: right bottom;
  }
  .layer-6 { 
    z-index: -21; 
    transform-origin: left bottom;
  }
  .layer-7 { 
    z-index: -20; 
    transform-origin: right center;
  }
  .layer-8 { 
    z-index: -19; 
    transform-origin: center center;
  }

  /* Staggered animation cho từng layer */
  .layer-1 { animation-delay: 0s; }
  .layer-2 { animation-delay: 0.1s; }
  .layer-3 { animation-delay: 0.2s; }
  .layer-4 { animation-delay: 0.3s; }
  .layer-5 { animation-delay: 0.4s; }
  .layer-6 { animation-delay: 0.5s; }
  .layer-7 { animation-delay: 0.6s; }
  .layer-8 { animation-delay: 0.7s; }

  /* GPU acceleration cho better performance */
  #skill {
    will-change: transform;
    transform: translateZ(0);
    contain: layout style paint;
    perspective: 1500px;
    transform-style: preserve-3d;
    background: radial-gradient(ellipse at center, rgba(20, 20, 40, 0.9) 0%, rgba(0, 0, 0, 0.95) 100%);
  }
  
  /* Floating animation cho dynamic effect */
  @keyframes floatLayer {
    0%, 100% { 
      transform: translateY(0px) rotateX(0deg); 
    }
    50% { 
      transform: translateY(-15px) rotateX(2deg); 
    }
  }
  
  .parallax-layer:nth-child(odd) {
    animation: floatLayer 8s ease-in-out infinite;
  }
  
  .parallax-layer:nth-child(even) {
    animation: floatLayer 10s ease-in-out infinite reverse;
  }
  
  /* Optimize font rendering */
  .font-header, .font-code {
    font-display: swap;
    text-rendering: optimizeLegibility;
  }
  
  /* Prevent layout shifts */
  img {
    content-visibility: auto;
    contain-intrinsic-size: 300px 400px;
  }
  
  /* Optimize transforms */
  .transform-gpu {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
  }
  
  /* Responsive optimizations */
  @media (max-width: 768px) {
    .text-9xl {
      font-size: 4rem;
    }
    
    .text-4xl {
      font-size: 1.875rem;
    }
    
    .gap-12 {
      gap: 1.5rem;
    }
    
    .parallax-layer {
      animation: none !important;
      transform: scale(1.05);
      transition: transform 0.3s ease-in-out;
    }
  }
  
  @media (max-width: 480px) {
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .flex {
      flex-direction: column;
    }
    
    .w-2\/3 {
      width: 100%;
    }
    
    .parallax-layer {
      width: 90% !important;
      height: 60% !important;
      opacity: 0.1 !important;
    }
  }
</style>

<script type="module">
  let ticking = false;
  
  function updateParallax() {
    const scrollY = window.pageYOffset;
    const skillSection = document.getElementById('skill');
    
    if (!skillSection) return;
    
    const rect = skillSection.getBoundingClientRect();
    const isInView = rect.top < window.innerHeight && rect.bottom > 0;
    
    if (isInView) {
      const parallaxLayers = skillSection.querySelectorAll('.parallax-layer');
      
      parallaxLayers.forEach((layer, index) => {
        const speed = parseFloat(layer.dataset.speed) || 0.1;
        const yPos = -(scrollY * speed);
        const scale = 1 + (index * 0.05);
        const opacity = Math.max(0.1, 0.3 - (index * 0.04));
        
        layer.style.transform = `
          translate3d(0, ${yPos}px, ${-100 - (index * 50)}px) 
          scale(${scale})
        `;
        layer.style.opacity = opacity;
      });
    }
    
    ticking = false;
  }
  
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(updateParallax);
      ticking = true;
    }
  }
  
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
        if (entry.target.id === 'skill' && !window.__scrollListenerAdded) {
          window.addEventListener('scroll', requestTick, { passive: true });
          window.__scrollListenerAdded = true;
        }
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);
  
  document.addEventListener('DOMContentLoaded', () => {
    const skillSection = document.getElementById('skill');
    const skillCards = document.querySelectorAll('#skill [class*="col-"]');
    
    if (skillSection) {
      observer.observe(skillSection);
      updateParallax();
    }
    
    skillCards.forEach(card => observer.observe(card));
  });
  
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      window.removeEventListener('scroll', requestTick);
      window.__scrollListenerAdded = false;
    } else {
      const skillSection = document.getElementById('skill');
      if (skillSection) {
        const rect = skillSection.getBoundingClientRect();
        const isInView = rect.top < window.innerHeight && rect.bottom > 0;
        if (isInView && !window.__scrollListenerAdded) {
          window.addEventListener('scroll', requestTick, { passive: true });
          window.__scrollListenerAdded = true;
        }
      }
    }
  });
</script>
