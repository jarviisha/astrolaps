import * as THREE from "three";

/**
 * L·ªõp RenaissanceCodingCube - T·∫°o kh·ªëi Rubik 3D v·ªõi hi·ªáu ·ª©ng Renaissance
 * Hi·ªÉn th·ªã c√°c k√Ω t·ª± l·∫≠p tr√¨nh, to√°n h·ªçc, v√† bi·ªÉu t∆∞·ª£ng v·ªõi phong c√°ch c·ªï ƒëi·ªÉn
 */
class RenaissanceCodingCube {
  constructor(containerId, options = {}) {
    // Kh·ªüi t·∫°o container v√† ki·ªÉm tra t·ªìn t·∫°i
    this.container = document.getElementById(containerId);
    if (!this.container) {
      console.error(`Container v·ªõi ID "${containerId}" kh√¥ng t·ªìn t·∫°i`);
      return;
    }

    // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc v√† ƒë·ªëi t∆∞·ª£ng Three.js c∆° b·∫£n
    this.width = this.container.clientWidth;
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000);
    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    this.rubikGroup = new THREE.Group(); // Nh√≥m ch·ª©a t·∫•t c·∫£ c√°c kh·ªëi cube
    this.animationId = null;
    this._destroyed = false;

    // H·∫±ng s·ªë c·∫•u h√¨nh
    this.CUBE_SIZE = 3; // K√≠ch th∆∞·ªõc kh·ªëi Rubik 3x3x3
    this.SPACING = 1.1; // Kho·∫£ng c√°ch gi·ªØa c√°c kh·ªëi nh·ªè
    this.TEXTURE_SIZE = 256; // K√≠ch th∆∞·ªõc texture cho m·ªói m·∫∑t
    this.ANIMATION_SPEED = 0.0008; // T·ªëc ƒë·ªô animation chung
    this.PULSE_AMPLITUDE = 0.4; // Bi√™n ƒë·ªô hi·ªáu ·ª©ng pulse
    this.TEXT_UPDATE_INTERVAL = 300; // Th·ªùi gian c·∫≠p nh·∫≠t texture (ms)

    // B·∫£ng m√†u phong c√°ch Renaissance
    this.RENAISSANCE_COLORS = {
      gold: "#D4AF37",        // V√†ng
      deepRed: "#8B0000",     // ƒê·ªè ƒë·∫≠m
      richBlue: "#191970",    // Xanh ƒë·∫≠m
      emerald: "#50C878",     // Xanh l·ª•c b·∫£o
      burgundy: "#800020",    // ƒê·ªè burgundy
      bronze: "#CD7F32",      // ƒê·ªìng
      ivory: "#FFFFF0",       // Ng√†
      crimson: "#DC143C",     // ƒê·ªè t∆∞∆°i
      parchment: "#F5F5DC",   // M√†u gi·∫•y c·ªï
      inkBlue: "#2F4F4F",     // Xanh m·ª±c
      copperGreen: "#7CB342", // Xanh ƒë·ªìng
      darkGold: "#B8860B",    // V√†ng ƒë·∫≠m
      rust: "#B7410E",        // M√†u r·ªâ s√©t
      sage: "#87A96B",        // Xanh sage
    };

    // C√°c ch·ªß ƒë·ªÅ v·ªõi k√Ω t·ª± v√† m√†u s·∫Øc t∆∞∆°ng ·ª©ng
    this.CODING_THEMES = {
      code: {
        symbols: ["{}", "[]", "()", "<>", "&&", "||", "==", "!=", "++", "--", "->", "=>", "??", "::", "0", "1"],
        colors: ["gold", "emerald", "richBlue", "bronze"],
      },
      math: {
        symbols: ["‚à´", "‚àë", "‚àè", "‚àÜ", "‚àá", "‚àû", "‚âà", "‚â†", "¬±", "‚àö", "‚àÇ", "‚àÄ", "‚àÉ", "‚àà"],
        colors: ["deepRed", "burgundy", "bronze", "gold"],
      },
      symbols: {
        symbols: ["‚ö°", "‚öô", "‚öõ", "‚öú", "‚ùã", "‚ùà", "‚úß", "‚óä", "‚Äª", "‚ÅÇ", "‚òô", "‚ùñ", "‚ú¶", "‚ô†"],
        colors: ["crimson", "gold", "emerald", "bronze"],
      },
      alchemy: {
        symbols: ["‚òø", "‚ôÉ", "‚ôÑ", "‚ôÄ", "‚ôÇ", "‚òâ", "‚òΩ", "üúÄ", "üúÅ", "üúÇ", "üúÉ", "üúÑ", "‚ñ≥", "‚ñΩ"],
        colors: ["copperGreen", "burgundy", "gold", "deepRed"],
      },
      geometry: {
        symbols: ["‚óØ", "‚ñ≥", "‚ñ°", "‚óá", "‚¨ü", "‚¨¢", "‚¨°", "‚¨†", "‚¨£", "‚¨§", "‚¨•", "‚¨¶", "‚¨ß", "‚¨®"],
        colors: ["darkGold", "rust", "sage", "bronze"],
      },
      manuscript: {
        symbols: ["‚Ñß", "‚Ñ©", "‚Ñà", "‚Ñû", "‚Ñü", "‚Ñ†", "‚Ñ°", "‚Ñ¢", "‚Ñ£", "‚Ñ§", "‚Ñ•", "Œ©", "‚Ñß", "‚Ñ©"],
        colors: ["inkBlue", "burgundy", "bronze", "deepRed"],
      },
    };

    // Thi·∫øt l·∫≠p theme v√† c·∫•u h√¨nh k√Ω t·ª± ƒë·∫∑c bi·ªát
    this.currentTheme = options.theme || "code";
    this.singleCharConfig = options.singleCharConfig || this.getDefaultSingleCharConfig();

    // Cache ƒë·ªÉ t·ªëi ∆∞u h√≥a
    this.textureCache = new Map();
    this.materialCache = new Map();

    this.init();
  }

  /**
   * Kh·ªüi t·∫°o t·∫•t c·∫£ th√†nh ph·∫ßn c·ªßa cube
   */
  init() {
    this.setupCamera();
    this.setupRenderer();
    this.createRubikCube();
    this.setupLighting();
    this.setupEventListeners();
    this.animate();
  }

  /**
   * Thi·∫øt l·∫≠p camera
   */
  setupCamera() {
    this.camera.position.z = 8;
  }

  /**
   * Thi·∫øt l·∫≠p renderer v·ªõi shadow mapping
   */
  setupRenderer() {
    this.renderer.setClearColor(0x000000, 0); // N·ªÅn trong su·ªët
    this.renderer.setSize(this.width, this.width);
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    this.container.appendChild(this.renderer.domElement);
  }

  /**
   * L·∫•y c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho k√Ω t·ª± ƒë·∫∑c bi·ªát
   */
  getDefaultSingleCharConfig() {
    const theme = this.CODING_THEMES[this.currentTheme];
    return {
      front: { position: [1, 1, 2], char: theme.symbols[0] },
      back: { position: [1, 1, 0], char: theme.symbols[1] },
      left: { position: [0, 1, 1], char: theme.symbols[2] },
      right: { position: [2, 1, 1], char: theme.symbols[3] },
      top: { position: [1, 2, 1], char: theme.symbols[4] },
      bottom: { position: [1, 0, 1], char: theme.symbols[5] },
    };
  }

  /**
   * ƒê·ªïi theme cho cube
   * @param {string} themeName - T√™n theme m·ªõi
   */
  setTheme(themeName) {
    if (this.CODING_THEMES[themeName]) {
      this.currentTheme = themeName;
      this.singleCharConfig = this.getDefaultSingleCharConfig();
      this.clearCache(); // X√≥a cache khi ƒë·ªïi theme
      this.recreateRubikCube();
    }
  }

  /**
   * L·∫•y danh s√°ch c√°c theme c√≥ s·∫µn
   */
  getAvailableThemes() {
    return Object.keys(this.CODING_THEMES);
  }

  /**
   * L·∫•y theme hi·ªán t·∫°i
   */
  getCurrentTheme() {
    return this.currentTheme;
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh k√Ω t·ª± ƒë·∫∑c bi·ªát
   * @param {Object} newConfig - C·∫•u h√¨nh m·ªõi
   */
  updateSingleCharConfig(newConfig) {
    this.singleCharConfig = { ...this.singleCharConfig, ...newConfig };
    this.recreateRubikCube();
  }

  /**
   * ƒê·∫∑t k√Ω t·ª± cho m·ªôt m·∫∑t c·ª• th·ªÉ
   * @param {string} face - T√™n m·∫∑t (front, back, left, right, top, bottom)
   * @param {string} char - K√Ω t·ª± m·ªõi
   */
  setFaceCharacter(face, char) {
    if (this.singleCharConfig[face]) {
      this.singleCharConfig[face].char = char;
      this.recreateRubikCube();
    }
  }

  /**
   * ƒê·∫∑t v·ªã tr√≠ cho m·ªôt m·∫∑t c·ª• th·ªÉ
   * @param {string} face - T√™n m·∫∑t
   * @param {number} x - T·ªça ƒë·ªô x
   * @param {number} y - T·ªça ƒë·ªô y  
   * @param {number} z - T·ªça ƒë·ªô z
   */
  setFacePosition(face, x, y, z) {
    if (this.singleCharConfig[face]) {
      this.singleCharConfig[face].position = [x, y, z];
      this.recreateRubikCube();
    }
  }

  /**
   * X√≥a cache ƒë·ªÉ t·ªëi ∆∞u b·ªô nh·ªõ
   */
  clearCache() {
    this.textureCache.clear();
    this.materialCache.clear();
  }

  /**
   * T·∫°o l·∫°i cube v·ªõi c·∫•u h√¨nh m·ªõi
   */
  recreateRubikCube() {
    this.disposeRubikCube();
    this.createRubikCube();
  }

  /**
   * Gi·∫£i ph√≥ng b·ªô nh·ªõ c·ªßa cube c≈©
   */
  disposeRubikCube() {
    this.rubikGroup.children.forEach((cube) => {
      // D·ª´ng timer c·∫≠p nh·∫≠t texture
      if (cube.userData.textureUpdateTimer) {
        clearInterval(cube.userData.textureUpdateTimer);
      }

      // Gi·∫£i ph√≥ng geometry
      if (cube.geometry) {
        cube.geometry.dispose();
      }

      // Gi·∫£i ph√≥ng materials v√† textures
      if (cube.material instanceof Array) {
        cube.material.forEach((m) => {
          if (m.map) m.map.dispose();
          m.dispose();
        });
      } else if (cube.material) {
        if (cube.material.map) cube.material.map.dispose();
        cube.material.dispose();
      }

      // Gi·∫£i ph√≥ng wireframe
      cube.children.forEach((child) => {
        if (child.geometry) child.geometry.dispose();
        if (child.material) child.material.dispose();
      });
    });

    this.rubikGroup.clear();
  }

  /**
   * Thi·∫øt l·∫≠p h·ªá th·ªëng √°nh s√°ng Renaissance
   */
  setupLighting() {
    // √Ånh s√°ng m√¥i tr∆∞·ªùng m√†u v√†ng
    const ambientLight = new THREE.AmbientLight(0xffd700, 0.4);

    // √Ånh s√°ng ch√≠nh v·ªõi shadow
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(10, 10, 5);
    directionalLight.castShadow = true;
    directionalLight.shadow.mapSize.width = 1024;
    directionalLight.shadow.mapSize.height = 1024;

    // √Ånh s√°ng vi·ªÅn m√†u ƒë·ªìng
    const rimLight = new THREE.DirectionalLight(0xcd7f32, 0.3);
    rimLight.position.set(-5, 5, -5);

    // √Ånh s√°ng b·ªï sung
    const fillLight = new THREE.DirectionalLight(0xffd700, 0.2);
    fillLight.position.set(0, -5, 0);

    this.scene.add(ambientLight, directionalLight, rimLight, fillLight);
  }

  /**
   * V·∫Ω n·ªÅn gi·∫•y c·ªï phong c√°ch Renaissance
   * @param {CanvasRenderingContext2D} ctx - Context canvas
   * @param {number} size - K√≠ch th∆∞·ªõc canvas
   */
  drawRenaissanceBackground(ctx, size) {
    // Gradient xuy√™n t√¢m t·∫°o hi·ªáu ·ª©ng gi·∫•y c·ªï
    const gradient = ctx.createRadialGradient(
      size / 2, size / 2, 0,
      size / 2, size / 2, size / 2
    );
    gradient.addColorStop(0, this.RENAISSANCE_COLORS.ivory);
    gradient.addColorStop(0.2, this.RENAISSANCE_COLORS.parchment);
    gradient.addColorStop(0.6, "#F0E68C");
    gradient.addColorStop(0.8, this.RENAISSANCE_COLORS.bronze);
    gradient.addColorStop(1, this.RENAISSANCE_COLORS.deepRed);

    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, size, size);

    // Hi·ªáu ·ª©ng texture gi·∫•y c≈©
    ctx.globalAlpha = 0.15;
    ctx.fillStyle = this.RENAISSANCE_COLORS.burgundy;
    for (let i = 0; i < 15; i++) { // Gi·∫£m s·ªë l∆∞·ª£ng ƒë·ªÉ t·ªëi ∆∞u
      const x = Math.random() * size;
      const y = Math.random() * size;
      const w = Math.random() * 2 + 1;
      const h = Math.random() * 4 + 1;
      ctx.fillRect(x, y, w, h);
    }

    // C√°c ƒë·ªëm m·ª±c nh·ªè
    ctx.globalAlpha = 0.08;
    ctx.fillStyle = this.RENAISSANCE_COLORS.inkBlue;
    for (let i = 0; i < 4; i++) {
      const x = Math.random() * size;
      const y = Math.random() * size;
      const radius = Math.random() * 3 + 1;
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, Math.PI * 2);
      ctx.fill();
    }
    ctx.globalAlpha = 1;
  }

  /**
   * V·∫Ω k√Ω t·ª± l√™n canvas
   * @param {CanvasRenderingContext2D} ctx - Context canvas
   * @param {number} size - K√≠ch th∆∞·ªõc canvas
   * @param {string} mode - Ch·∫ø ƒë·ªô v·∫Ω ('grid' ho·∫∑c 'single')
   * @param {string} customChar - K√Ω t·ª± t√πy ch·ªânh
   */
  drawChars(ctx, size = this.TEXTURE_SIZE, mode = "grid", customChar = null) {
    if (mode === "single") {
      this.drawRenaissanceBackground(ctx, size);
      this.drawSingleChar(ctx, size, customChar);
    } else {
      this.drawRenaissanceGrid(ctx, size);
    }
  }

  /**
   * V·∫Ω m·ªôt k√Ω t·ª± l·ªõn ·ªü gi·ªØa canvas
   * @param {CanvasRenderingContext2D} ctx - Context canvas
   * @param {number} size - K√≠ch th∆∞·ªõc canvas
   * @param {string} customChar - K√Ω t·ª± t√πy ch·ªânh
   */
  drawSingleChar(ctx, size, customChar = null) {
    const theme = this.CODING_THEMES[this.currentTheme];
    const fontSize = Math.floor(size * 0.4);

    // C·∫•u h√¨nh font
    ctx.font = `bold ${fontSize}px "Fira Code", serif`;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";

    // Hi·ªáu ·ª©ng shadow
    ctx.shadowColor = this.RENAISSANCE_COLORS.burgundy;
    ctx.shadowBlur = 8;
    ctx.shadowOffsetX = 3;
    ctx.shadowOffsetY = 3;

    // Ch·ªçn m√†u v√† k√Ω t·ª± ng·∫´u nhi√™n
    const colorName = theme.colors[Math.floor(Math.random() * theme.colors.length)];
    ctx.fillStyle = this.RENAISSANCE_COLORS[colorName];
    const char = customChar || theme.symbols[Math.floor(Math.random() * theme.symbols.length)];

    // V·∫Ω k√Ω t·ª± ch√≠nh
    ctx.fillText(char, size / 2, size / 2);

    // Reset shadow
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;

    // V·∫Ω khung vi·ªÅn
    ctx.strokeStyle = this.RENAISSANCE_COLORS.bronze;
    ctx.lineWidth = 3;
    ctx.strokeRect(8, 8, size - 16, size - 16);

    ctx.strokeStyle = this.RENAISSANCE_COLORS.gold;
    ctx.lineWidth = 1;
    ctx.strokeRect(12, 12, size - 24, size - 24);

    // V·∫Ω trang tr√≠ g√≥c
    ctx.fillStyle = this.RENAISSANCE_COLORS.gold;
    ctx.font = `${Math.floor(size * 0.12)}px serif`;
    const flourish = "‚ùã";
    const positions = [[20, 20], [size - 20, 20], [20, size - 20], [size - 20, size - 20]];
    positions.forEach(([x, y]) => ctx.fillText(flourish, x, y));
  }

  /**
   * V·∫Ω l∆∞·ªõi 3x3 k√Ω t·ª±
   * @param {CanvasRenderingContext2D} ctx - Context canvas
   * @param {number} size - K√≠ch th∆∞·ªõc canvas
   */
  drawRenaissanceGrid(ctx, size) {
    const theme = this.CODING_THEMES[this.currentTheme];

    // N·ªÅn gradient
    const gradient = ctx.createLinearGradient(0, 0, size, size);
    gradient.addColorStop(0, this.RENAISSANCE_COLORS.ivory);
    gradient.addColorStop(0.25, this.RENAISSANCE_COLORS.parchment);
    gradient.addColorStop(0.5, "#F5F5DC");
    gradient.addColorStop(0.75, "#F0E68C");
    gradient.addColorStop(1, this.RENAISSANCE_COLORS.bronze);

    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, size, size);

    // Texture nh·∫π
    ctx.globalAlpha = 0.12;
    ctx.fillStyle = this.RENAISSANCE_COLORS.burgundy;
    for (let i = 0; i < 20; i++) {
      const x = Math.random() * size;
      const y = Math.random() * size;
      ctx.fillRect(x, y, 1, Math.random() * 2 + 1);
    }
    ctx.globalAlpha = 1;

    // V·∫Ω l∆∞·ªõi 3x3
    const rows = 3;
    const cols = 3;
    const cellW = size / cols;
    const cellH = size / rows;
    const fontSize = Math.floor(cellH * 0.4);

    ctx.font = `bold ${fontSize}px "Fira Code", serif`;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";

    for (let i = 0; i < 9; i++) {
      const row = Math.floor(i / cols);
      const col = i % cols;
      const x = col * cellW + cellW / 2;
      const y = row * cellH + cellH / 2;

      // Ch·ªçn k√Ω t·ª± v√† m√†u ng·∫´u nhi√™n
      const char = theme.symbols[Math.floor(Math.random() * theme.symbols.length)];
      const colorName = theme.colors[Math.floor(Math.random() * theme.colors.length)];

      // Hi·ªáu ·ª©ng shadow nh·∫π
      ctx.shadowColor = this.RENAISSANCE_COLORS.burgundy;
      ctx.shadowBlur = 2;
      ctx.shadowOffsetX = 1;
      ctx.shadowOffsetY = 1;

      ctx.fillStyle = this.RENAISSANCE_COLORS[colorName];
      ctx.fillText(char, x, y);
    }

    // Reset shadow
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
  }

  /**
   * T·∫°o textures cho c√°c m·∫∑t c·ªßa cube
   * @param {Array} modes - M·∫£ng ch·∫ø ƒë·ªô cho t·ª´ng m·∫∑t
   * @param {Object} customChars - K√Ω t·ª± t√πy ch·ªânh cho t·ª´ng m·∫∑t
   */
  createFaceTextures(modes = [], customChars = {}) {
    const faceOrder = ["right", "left", "top", "bottom", "front", "back"];

    return modes.map((mode, index) => {
      const faceName = faceOrder[index];
      const customChar = customChars[faceName];

      // Ki·ªÉm tra cache
      const cacheKey = `${mode}_${customChar}_${this.currentTheme}`;
      if (this.textureCache.has(cacheKey)) {
        return this.textureCache.get(cacheKey);
      }

      // T·∫°o canvas v√† texture m·ªõi
      const canvas = document.createElement("canvas");
      canvas.width = canvas.height = this.TEXTURE_SIZE;
      const ctx = canvas.getContext("2d");

      const texture = new THREE.CanvasTexture(canvas);
      texture.minFilter = THREE.LinearFilter;
      texture.magFilter = THREE.LinearFilter;
      texture.wrapS = texture.wrapT = THREE.ClampToEdgeWrapping;

      this.drawChars(ctx, this.TEXTURE_SIZE, mode, customChar);

      const result = { canvas, ctx, texture, mode, customChar, faceName };
      this.textureCache.set(cacheKey, result);
      return result;
    });
  }

  /**
   * T·∫°o m·ªôt cube v·ªõi textures
   * @param {THREE.Vector3} position - V·ªã tr√≠ cube
   * @param {Object} faceMode - Ch·∫ø ƒë·ªô cho t·ª´ng m·∫∑t
   * @param {Object} customChars - K√Ω t·ª± t√πy ch·ªânh
   */
  createTextCube(position, faceMode = {}, customChars = {}) {
    const faceOrder = ["right", "left", "top", "bottom", "front", "back"];
    const modes = faceOrder.map((face) => faceMode[face] || "grid");

    const faceTextures = this.createFaceTextures(modes, customChars);

    // T·∫°o materials
    const materials = faceTextures.map(f => {
      const materialKey = `${f.mode}_${f.customChar}_${this.currentTheme}`;

      if (this.materialCache.has(materialKey)) {
        return this.materialCache.get(materialKey);
      }

      const material = new THREE.MeshLambertMaterial({
        map: f.texture,
        transparent: true,
        side: THREE.DoubleSide,
      });

      this.materialCache.set(materialKey, material);
      return material;
    });

    // T·∫°o cube
    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const cube = new THREE.Mesh(geometry, materials);
    cube.castShadow = true;
    cube.receiveShadow = true;

    // Th√™m wireframe
    const edges = new THREE.EdgesGeometry(geometry);
    const wireframe = new THREE.LineSegments(
      edges,
      new THREE.LineBasicMaterial({
        color: 0xd4af37,
        linewidth: 2,
        transparent: true,
        opacity: 0.7,
      })
    );
    cube.add(wireframe);

    // L∆∞u th√¥ng tin texture
    cube.userData.faceTextures = faceTextures;

    // Timer c·∫≠p nh·∫≠t texture (t·ªëi ∆∞u h√≥a)
    // const updateInterval = this.TEXT_UPDATE_INTERVAL + Math.random() * 200;
    // cube.userData.textureUpdateTimer = setInterval(() => {
    //   if (this._destroyed) return;

    //   faceTextures.forEach((f) => {
    //     if (Math.random() < 0.3) { // Ch·ªâ c·∫≠p nh·∫≠t 30% th·ªùi gian
    //       this.drawChars(f.ctx, this.TEXTURE_SIZE, f.mode, f.customChar);
    //       f.texture.needsUpdate = true;
    //     }
    //   });
    // }, updateInterval);

    return cube;
  }

  /**
   * T·∫°o to√†n b·ªô kh·ªëi Rubik 3x3x3
   */
  createRubikCube() {
    for (let x = 0; x < this.CUBE_SIZE; x++) {
      for (let y = 0; y < this.CUBE_SIZE; y++) {
        for (let z = 0; z < this.CUBE_SIZE; z++) {
          const basePosition = new THREE.Vector3(x - 1, y - 1, z - 1);
          const { faceMode, customChars } = this.determineFaceMode(x, y, z);

          const cube = this.createTextCube(basePosition, faceMode, customChars);
          cube.userData.basePosition = basePosition.clone();
          cube.userData.gridPosition = { x, y, z };
          this.rubikGroup.add(cube);
        }
      }
    }
    this.scene.add(this.rubikGroup);
  }

  /**
   * X√°c ƒë·ªãnh ch·∫ø ƒë·ªô hi·ªÉn th·ªã cho t·ª´ng m·∫∑t d·ª±a tr√™n v·ªã tr√≠
   * @param {number} x - T·ªça ƒë·ªô x
   * @param {number} y - T·ªça ƒë·ªô y
   * @param {number} z - T·ªça ƒë·ªô z
   */
  determineFaceMode(x, y, z) {
    const faceMode = {};
    const customChars = {};

    Object.entries(this.singleCharConfig).forEach(([faceName, config]) => {
      const [targetX, targetY, targetZ] = config.position;
      if (x === targetX && y === targetY && z === targetZ) {
        faceMode[faceName] = "single";
        customChars[faceName] = config.char;
      }
    });

    return { faceMode, customChars };
  }

  /**
   * C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c cube v·ªõi hi·ªáu ·ª©ng pulse
   * @param {number} time - Th·ªùi gian hi·ªán t·∫°i
   */
  updateCubePositions(time) {
    const t = time * this.ANIMATION_SPEED;

    this.rubikGroup.children.forEach((cube) => {
      const base = cube.userData.basePosition;
      const dist = base.length();

      // T√≠nh to√°n h∆∞·ªõng di chuy·ªÉn
      let direction = new THREE.Vector3();
      if (dist < 0.01) {
        direction.set(0, 1, 0); // Cube trung t√¢m
      } else {
        direction.copy(base).normalize();
      }

      // T√≠nh to√°n offset pulse
      let offset = new THREE.Vector3();
      if (dist < 0.01) {
        // Cube trung t√¢m pulse ng∆∞·ª£c
        const offsetAmount = Math.sin(t * 1.5) * this.PULSE_AMPLITUDE;
        offset = direction.multiplyScalar(offsetAmount);
      } else if (Math.abs(dist - Math.sqrt(3)) < 0.01) {
        // Cube g√≥c pulse c√πng pha
        const offsetAmount = Math.sin(t * 1.5 + Math.PI) * this.PULSE_AMPLITUDE;
        offset = direction.multiplyScalar(offsetAmount);
      }

      // √Åp d·ª•ng v·ªã tr√≠ m·ªõi
      cube.position.set(
        base.x * this.SPACING + offset.x,
        base.y * this.SPACING + offset.y,
        base.z * this.SPACING + offset.z
      );
    });
  }

  /**
   * V√≤ng l·∫∑p animation ch√≠nh
   */
  animate = (time) => {
    if (this._destroyed) return;

    this.animationId = requestAnimationFrame(this.animate);

    // C·∫≠p nh·∫≠t v·ªã tr√≠ cube
    this.updateCubePositions(time);

    // Xoay to√†n b·ªô nh√≥m cube
    this.rubikGroup.rotation.y += 0.008;
    this.rubikGroup.rotation.x += 0.004;
    this.rubikGroup.rotation.z += 0.002;

    // Render scene
    this.renderer.render(this.scene, this.camera);
  };

  /**
   * X·ª≠ l√Ω s·ª± ki·ªán resize window
   */
  handleResize = () => {
    if (!this.container) return;

    const w = this.container.clientWidth;
    this.camera.aspect = 1;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(w, w);
    this.width = w;
  };

  /**
   * Thi·∫øt l·∫≠p event listeners
   */
  setupEventListeners() {
    window.addEventListener("resize", this.handleResize);
  }

  /**
   * T·∫°m d·ª´ng animation
   */
  pauseAnimation() {
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }

  /**
   * Ti·∫øp t·ª•c animation
   */
  resumeAnimation() {
    if (!this.animationId && !this._destroyed) {
      this.animate();
    }
  }

  /**
   * ƒê·∫∑t t·ªëc ƒë·ªô animation
   * @param {number} speed - T·ªëc ƒë·ªô m·ªõi
   */
  setAnimationSpeed(speed) {
    this.ANIMATION_SPEED = Math.max(0.0001, Math.min(0.01, speed));
  }

  /**
   * ƒê·∫∑t bi√™n ƒë·ªô hi·ªáu ·ª©ng pulse
   * @param {number} amplitude - Bi√™n ƒë·ªô m·ªõi
   */
  setPulseAmplitude(amplitude) {
    this.PULSE_AMPLITUDE = Math.max(0, Math.min(1, amplitude));
  }

  /**
   * ƒê·∫∑t t·ªëc ƒë·ªô c·∫≠p nh·∫≠t texture
   * @param {number} interval - Kho·∫£ng th·ªùi gian c·∫≠p nh·∫≠t (ms)
   */
  setTextureUpdateInterval(interval) {
    this.TEXT_UPDATE_INTERVAL = Math.max(100, interval);
  }

  /**
   * L·∫•y th√¥ng tin hi·ªáu su·∫•t
   */
  getPerformanceInfo() {
    return {
      cubeCount: this.rubikGroup.children.length,
      textureCache: this.textureCache.size,
      materialCache: this.materialCache.size,
      animationRunning: this.animationId !== null,
      currentTheme: this.currentTheme
    };
  }

  /**
   * Gi·∫£i ph√≥ng b·ªô nh·ªõ v√† d·ªçn d·∫πp
   */
  destroy() {
    console.log("ƒêang d·ªçn d·∫πp RenaissanceCodingCube...");

    this._destroyed = true;

    // D·ª´ng animation
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }

    // D·ªçn d·∫πp c√°c cube
    this.disposeRubikCube();

    // X√≥a cache
    this.clearCache();

    // G·ª° b·ªè event listeners
    window.removeEventListener("resize", this.handleResize);

    // D·ªçn d·∫πp scene v√† renderer
    this.scene.clear();
    this.renderer.dispose();

    // G·ª° b·ªè canvas kh·ªèi DOM
    if (this.container && this.renderer.domElement) {
      this.container.removeChild(this.renderer.domElement);
    }

    console.log("D·ªçn d·∫πp ho√†n t·∫•t!");
  }
}

// Export cho s·ª≠ d·ª•ng trong module kh√°c
if (typeof module !== "undefined" && module.exports) {
  module.exports = RenaissanceCodingCube;
}

// ƒêƒÉng k√Ω global cho browser
if (typeof window !== "undefined") {
  window.RenaissanceCodingCube = RenaissanceCodingCube;
}

/**
 * Kh·ªüi t·∫°o t·ª± ƒë·ªông khi DOM ready
 */
window.addEventListener("DOMContentLoaded", () => {
  // Ki·ªÉm tra xem c√≥ element v·ªõi id 'rubik-cube' kh√¥ng
  const container = document.getElementById("rubik-cube");
  if (!container) {
    console.log("Kh√¥ng t√¨m th·∫•y container v·ªõi id 'rubik-cube'");
    return;
  }

  console.log("Kh·ªüi t·∫°o RenaissanceCodingCube...");

  // T·∫°o instance cube v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
  const cube = new RenaissanceCodingCube("rubik-cube", {
    theme: "code"
  });

  // L∆∞u reference global ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ console
  window.cubeInstance = cube;
  cube.setAnimationSpeed(0.001);
  cube.setPulseAmplitude(0.6);

  // Cleanup khi trang ƒë∆∞·ª£c ƒë√≥ng
  window.addEventListener("beforeunload", () => {
    if (window.cubeInstance) {
      window.cubeInstance.destroy();
    }
  });
});

/**
 * Utility functions ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi cube
 */
window.CubeUtils = {
  /**
   * T·∫°o cube m·ªõi v·ªõi theme c·ª• th·ªÉ
   * @param {string} containerId - ID container
   * @param {string} theme - T√™n theme
   */
  createCube(containerId, theme = "code") {
    return new RenaissanceCodingCube(containerId, { theme });
  },

  /**
   * L·∫•y danh s√°ch c√°c theme c√≥ s·∫µn
   */
  getAvailableThemes() {
    const tempCube = new RenaissanceCodingCube("temp");
    const themes = tempCube ? tempCube.getAvailableThemes() : [];
    if (tempCube) tempCube.destroy();
    return themes;
  },

  /**
   * T·∫°o c·∫•u h√¨nh k√Ω t·ª± ng·∫´u nhi√™n
   */
  generateRandomConfig() {
    const themes = this.getAvailableThemes();
    const randomTheme = themes[Math.floor(Math.random() * themes.length)];

    return {
      theme: randomTheme,
      animationSpeed: 0.0005 + Math.random() * 0.002,
      pulseAmplitude: 0.2 + Math.random() * 0.4
    };
  }
};

console.log("RenaissanceCodingCube ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!");
console.log("S·ª≠ d·ª•ng window.cubeInstance ƒë·ªÉ truy c·∫≠p cube instance");
console.log("S·ª≠ d·ª•ng window.CubeUtils ƒë·ªÉ c√°c utility functions");